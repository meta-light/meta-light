'use client';
import React, { useState, useEffect } from 'react';
import { pRateLimit } from "p-ratelimit";
import { useWallet } from '@solana/wallet-adapter-react';
import { useWalletModal } from "@solana/wallet-adapter-react-ui";
import Section from '../components/basket/section'
import '../styles/basket.css'
import ProviderWrapper from '../components/basket/providers/ProviderWrapper'
import ClientWalletProvider from '../components/basket/providers/WalletProvider'
require('@solana/wallet-adapter-react-ui/styles.css');
export const metadata = {title: 'Create Next App', description: 'Generated by create next app'}
import * as web3 from '@solana/web3.js';
import BasketContext from '../components/basket/BasketContext';

export default function Home() {
  const wallet = useWallet();
  const walletModal = useWalletModal()
  const [assetInfoList, setAssetInfoList] = useState([]);
  let ownerAddress = "";
  if (wallet && wallet.publicKey) {ownerAddress = wallet.publicKey.toString(); console.log("Owner Address: ", ownerAddress);} else {console.log("Wallet not connected");}
  const [tps, setTps] = useState(null);
  useEffect(() => {fetchTPS();}, []);
  useEffect(() => { if (wallet.connected) {console.log("User's wallet address: ", wallet.publicKey?.toBase58());
      searchAssets();
    }
  }, [wallet.connected]);

  async function fetchTPS() {
    try {
      const response = await fetch('/api/tps');
      const data = await response.json();
      if (response.ok) {setTps(data.tps);} else {console.error('Failed to fetch TPS:', data.error);}
    } catch (error) {console.error('Error fetching TPS:', error);}
  }

  const heliusLimit = pRateLimit({
    interval: 60000, // 60000 ms == 1 minute
    rate: 120, // 120 API calls per interval
    concurrency: 10, // no more than 10 running at once
    maxDelay: 2000, // an API call delayed > 2 sec is rejected
  });

  

  async function searchAssets() {
    try {
      const ownerAddress = wallet.publicKey.toString();
      const response = await fetch(`/api/searchAssets?ownerAddress=${ownerAddress}&compressed=true&burnt=false&page=1`);
      const data = await response.json();
      if (response.ok) {
        setAssetInfoList(data.assetInfos);
      } else {
        console.error('Failed to fetch asset info:', data.error);
      }
    } catch (error) {
      console.error("Error in searchAssets:", error);
    }
  }
  
  // async function login() { 
  //   let connection = new web3.Connection(conf.cluster, "confirmed");
  //   provider = await wallet_provider();
  //   console.log("Connection: ", connection);
  //   console.log("Provider: ", provider);
  // }
  // login();

  return (
    <ProviderWrapper>
      <ClientWalletProvider><BasketContext.Provider value={{ assetInfoList, getTPS: fetchTPS, searchAssets }}>
        <main>
          <link rel="stylesheet" href="https://unpkg.com/terminal.css@0.7.2/dist/terminal.min.css" />
          <title>Basket</title>
          <section className="terminal-output">
            <p>Welcome to <strong>cNFT Basket</strong></p>
            <div className="output-area"></div>
          </section>
          <section className="terminal-output">
            <p>Solana Network TPS: <strong>{tps ? tps.toFixed(2) : null}</strong></p>
          </section>
          <Section assetInfoList={assetInfoList} getTPS={fetchTPS} searchAssets={searchAssets}/><br></br>
          <div className="article-grid">
            {assetInfoList.map((assetInfoList, index) => (
              <article key={index}>
                <div className="equlibrium-image-container">
                  <img className="view-icon-hover" src="icon-view.svg" alt="View Icon"/>
                  <img className="equilibrium-image" src={assetInfoList.image} alt={assetInfoList.name} width="604" />
                  <div className="profile-nick-div"><h2><span className="hover-cyan">{assetInfoList.name}</span></h2></div>
                </div>
              </article>
            ))}
          </div><br></br>
          <div className="terminal-output"><strong>Basket - 2023</strong></div><br></br>
        </main>
        </BasketContext.Provider></ClientWalletProvider>
    </ProviderWrapper>
  )
}


